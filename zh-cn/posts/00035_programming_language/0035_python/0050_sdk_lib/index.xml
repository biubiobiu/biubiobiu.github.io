<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SDK on biubiobiu's Blog</title><link>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/</link><description>Recent content in SDK on biubiobiu's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Everything is mine</copyright><lastBuildDate>Wed, 08 Dec 2021 16:00:20 +0800</lastBuildDate><atom:link href="https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/index.xml" rel="self" type="application/rss+xml"/><item><title>argparse</title><link>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0090_argparse/</link><pubDate>Wed, 08 Dec 2021 16:00:20 +0800</pubDate><guid>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0090_argparse/</guid><description>一、argparse模块 import argparse # 创建ArgumentParser()解析对象 parser = argparse.ArgumentParser() # 使用add_argument()方法，添加参数 parser.add_argument(&amp;#39;--integer&amp;#39;, type=int, default=0, help=&amp;#39;displayas integer&amp;#39;) parser.add_argument(&amp;#39;--string&amp;#39;, type=str, default=&amp;#39;&amp;#39;, help=&amp;#39;displayas string&amp;#39;) args = parser.parse_args() add_argument 的参数：
name or flags - 选项字符串的名字或者列表，例如 foo 或者 -f, &amp;ndash;foo。 action - 命令行遇到参数时的动作，默认值是 store。 store_const，表示赋值为const； append，将遇到的值存储成列表，也就是如果参数重复则会保存多个值; append_const，将参数规范中定义的一个值保存到一个列表； count，存储遇到的次数；此外，也可以继承 argparse.Action 自定义参数解析； nargs - 应该读取的命令行参数个数，可以是具体的数字，或者是?号，当不指定值时对于 Positional argument 使用 default，对于 Optional argument 使用 const；或者是 * 号，表示 0 &amp;gt; 或多个参数；或者是 + 号表示 1 或多个参数。 const - action 和 nargs 所需要的常量值。 default - 不指定参数时的默认值。 type - 命令行参数应该被转换成的类型。 choices - 参数可允许的值的一个容器。 required - 可选参数是否可以省略 (仅针对可选参数)。 help - 参数的帮助信息，当指定为 argparse.</description></item><item><title>ipdb包</title><link>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0040_ipdb/</link><pubDate>Wed, 08 Dec 2021 16:00:20 +0800</pubDate><guid>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0040_ipdb/</guid><description>一、ipdb 断点调试：
n(next) 下一条语句 s(step into) 进入函数调用的内部 b line_number(break) 给指定的行号位置加断点 c(continue) 给指定的文件（还没执行到的代码）中指定行号位置，打断点 r(return) 一直执行到下一个断点 j line_numver(jump) 可以跳过某段代码，直接执行指定行号所在的代码 cl(clear) 清楚断点，如果没有参数，则清除所有断点 restart 重新启动调试器 l first/second(list) 在ipdb调试环境中，默认只显示当前执行的代码行，以及上下各一行的代码，如果想要看到更多的上下文代码，可以使用该命令 w(where) 调试时可能会忘记自己目前做在的行号，可以使用w打印目前所在的行号位置，以及上下文信息 whatis variable_name 查看变量的类别，感觉有点鸡肋，用type也可以 a(argument) 当处于一个函数内部的时候，可以使用a打印传入函数的所有参数的值 p variable_name(print) 打印表达式的值 q 退出调试，并清楚所有信息</description></item><item><title>logging</title><link>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0080_logging/</link><pubDate>Wed, 08 Dec 2021 16:00:20 +0800</pubDate><guid>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0080_logging/</guid><description>一、logging模块 logging模块是Python内置的标准模块，主要用于输出运行日志，可以设置输出日志的等级、日志保存路径、日志文件回滚等；相比print，具备如下优点：
可以通过设置不同的日志等级，在release版本中只输出重要信息，而不必显示大量的调试信息； print将所有信息都输出到标准输出中，严重影响开发者从标准输出中查看其它数据；logging则可以由开发者决定将信息输出到什么地方，以及怎么输出； logging模块与log4j的机制是一样的，只是具体的实现细节不同。模块提供logger，handler，filter，formatter。
logger：提供日志接口，供应用代码使用。logger最长用的操作有两类：配置和发送日志消息。可以通过logging.getLogger(name)获取logger对象，如果不指定name则返回root对象，多次使用相同的name调用getLogger方法返回同一个logger对象。 handler：将日志记录（log record）发送到合适的目的地（destination），比如文件，socket等。一个logger对象可以通过addHandler方法添加到多个handler，每个handler又可以定义不同日志级别，以实现日志分级过滤显示。 filter：提供一种优雅的方式决定一个日志记录是否发送到handler。 formatter：指定日志记录输出的具体格式。formatter的构造方法需要两个参数：消息的格式字符串和日期字符串，这两个参数都是可选的。 与log4j类似，logger，handler和日志消息的调用可以有具体的日志级别（Level），只有在日志消息的级别大于logger和handler的级别。
import logging # logger = logging.getLogger(__name__) logger.setLevel(level = logging.INFO) # 创建一个FileHandler handler = logging.FileHandler(&amp;#39;log.txt&amp;#39;) # 设置等级: DEBUG &amp;lt; INFO &amp;lt; WARNING &amp;lt; ERROR &amp;lt; CRITICAL，而日志的信息量是依次减少的 handler.setLevel(logging.INFO) # 设置输出消息的格式 formatter = logging.Formatter(&amp;#39;%(asctime)s- %(name)s- %(levelname)s- %(message)s&amp;#39;) handler.setFormatter(formatter) # 添加到logger中 logger.addHandler(handler) # 写入消息 logger.info(&amp;#34;Hello&amp;#34;) 二、消息格式 输出消息的格式 解释 %(levelno)s 打印日志级别的数值 %(levelname)s 打印日志级别的名称 %(pathname)s 打印当前执行程序的路径，其实就是sys.</description></item><item><title>OpenCV</title><link>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0110_opencv/</link><pubDate>Wed, 08 Dec 2021 16:00:20 +0800</pubDate><guid>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0110_opencv/</guid><description>安装问题：在环境里安装OpenCV后，在pycharm上没有命令提示。这个可能是OpenCV版本的问题。
解决方案：python3 -m pip install &amp;ndash;force-reinstall &amp;ndash;no-cache -U opencv-python==4.5.5.62
一、连通域 cv2.connectedComponentsWithStats 示例：num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(image, connectivity=8, ltype=None)
输入参数：
* image: 二值图
* connectivity：可选值为4或者8，表示使用4联通还是8联通
* ltype：输出图像标记的类型，目前支持CV_32S、CV_16U
输出参数：
* num_labels: 所有连通域的数目
* labels：图像上每个像素的标记
* stats：每个标记的统计信息：是一个5列的矩阵[[x,y,width,height,面积]，]
* centroids：连通域的中心点
cv2.connectedComponents 示例：num_objects, labels = cv2.connectedComponents(image)
输入参数：
* image: 二值图，8bit单通道图像
输出参数：
* num_labels: 所有连通域的数目
二、画图</description></item><item><title>PIL</title><link>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0100_pil/</link><pubDate>Wed, 08 Dec 2021 16:00:20 +0800</pubDate><guid>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0100_pil/</guid><description>一、PIL模块 PIL: Python Imaging Library 已经是python平台上的图像处理的标准库了，PIL功能非常强大。由于PIL仅支持python2.7，加上年久失修，于是一群志愿者在PIL的基础上创建了兼容的版本，名字叫Pillow，支持最新Python3.x，又加入了许多新特征。
from PIL import Image 操作 解释 Image.fromarray() 从一个numpy对象转换为一个PIL image对象 img = Image.open(&amp;lsquo;test.jpg&amp;rsquo;) 打开一个图像文件，返回值img是一个PIL图像对象。PIL是个足够智能的类库，可以根据文件扩展名来判断图像的格式。 img.save(&amp;lsquo;路径&amp;rsquo;) PIL会根据文件扩展名来判断图像的格式，如果图像文件不是该格式，会自动将其转换为该格式。 img.thumbnail((h,w)) 创建图像的缩略图, thumbnail()方法接受一个元组参数, 指定生成缩略图的尺寸. 然后将图像转换成指定尺寸的缩略图. region = img.crop((左, 上, 右, 下)) 裁剪指定区域 region = region.transpose(Image.ROTATE_180)
img.paste(region, (左,上,右,下)) 旋转180，然后将该区域放回去 img.resize((h, w)) 调整图像尺寸, resize()方法的参数是一个元组, 用来指定新图像的尺寸 img.rotate(45) 逆时针旋转图像</description></item><item><title>requests</title><link>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0070_request/</link><pubDate>Wed, 08 Dec 2021 16:00:20 +0800</pubDate><guid>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0070_request/</guid><description>一、request模块 requests模块：在python内置模块上进行了高度的封装，使得requests更方便。
url: uniform resource locator，统一资源定位符：互联网上标准资源的地址。
格式：
模式/协议，比如：https、http 服务器名称(或者IP地址)，比如：api.github.com 路径和文件名，比如：events requests.get(url) get请求 &amp;mdash; 不带参数 requests.get(url, params={&amp;ldquo;参数1&amp;rdquo;:&amp;ldquo;值1&amp;rdquo;}) get请求 &amp;mdash; 带参数 requests.get(url, headers=header, cookie=cookie) header = {&amp;ldquo;content-type&amp;rdquo;: &amp;ldquo;application/json&amp;rdquo;,&amp;ldquo;user-agent&amp;rdquo;: &amp;ldquo;&amp;quot;} 定制headers requests.get(url, proxies=proxies) proxies = {&amp;ldquo;http&amp;rdquo;: &amp;ldquo;ip1&amp;rdquo;, &amp;ldquo;https&amp;rdquo;: &amp;ldquo;ip2&amp;rdquo;} 代理 requests.post(url, data=json.dumps({&amp;quot;&amp;quot;:&amp;quot;&amp;quot;})) post请求 requests.</description></item><item><title>堆-heapq</title><link>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0060_heapd/</link><pubDate>Wed, 08 Dec 2021 16:00:20 +0800</pubDate><guid>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0060_heapd/</guid><description>一、堆 import heapq 操作 解释 功能 例如：arr=[2, 9, 1, 4] heapq.heapify(arr) 建堆，对列表arr建堆。
也可以这样：
arr = [(5, &amp;lsquo;a&amp;rsquo;), (2, &amp;lsquo;b&amp;rsquo;), (8, &amp;lsquo;c&amp;rsquo;), (9, &amp;rsquo;d'), (6, &amp;lsquo;e&amp;rsquo;), (1, &amp;lsquo;f&amp;rsquo;)]
heapq.heapify(arr) 然后arr就变成：
[(1, &amp;lsquo;f&amp;rsquo;), (2, &amp;lsquo;b&amp;rsquo;), (5, &amp;lsquo;a&amp;rsquo;), (9, &amp;rsquo;d'), (6, &amp;lsquo;e&amp;rsquo;), (8, &amp;lsquo;c&amp;rsquo;)]
建堆 heapq.heappush(arr, 10) 添加元素，然后再向上调整堆。例如：在arr列表中添加5，然后在维持一个堆 添加 heapq.heappop(arr, 10) 提取堆顶，然后把堆尾放在堆顶，最后对堆顶做向下调整。把arr的堆顶元素提取出来。 pop heapq.heappushpop(arr, 10) 用新元素与堆顶做比较，如果堆顶大于新元素，直接返回新元素。否则返回堆顶，并把新元素放在堆顶后向下调整 heapq.</description></item><item><title>正则</title><link>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0050_re/</link><pubDate>Wed, 08 Dec 2021 16:00:20 +0800</pubDate><guid>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0050_re/</guid><description>一、字符 字符 中文-简体 \u4e00-\u9fa5 中文-繁体 \u9fa6-\u9fff 日文 \u3040-\u30fa 韩文 \uac00-\ud7ff 二、 三、</description></item><item><title>importlib包</title><link>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0030_importlib/</link><pubDate>Wed, 08 Dec 2021 06:00:20 +0800</pubDate><guid>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0030_importlib/</guid><description>import_module()函数 背景：一个函数运行，需要根据不同项目的配置，动态导入对应的配置文件。 例如：如下路径，向a模块中导入c.py中的对象 a
├── a.py
├── __init__.py
b
├── b.py
├── c │　├── c.py　# 该文件中，有变量args=[]，class C
│　├── __init__.py
方案：
import importlib # 导入 params = importlib.import_module(&amp;#34;b.c.c&amp;#34;) # 对象中取出需要的对象 params.args # 取出变量 params.C # 取出类C</description></item><item><title>并行操作</title><link>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0020_multiprocessing/</link><pubDate>Wed, 08 Sep 2021 06:00:20 +0800</pubDate><guid>https://biubiobiu.github.io/zh-cn/posts/00035_programming_language/0035_python/0050_sdk_lib/0020_multiprocessing/</guid><description>一、线程与进程 进程 线程 进程：是一个应用程序在处理机上的一次执行过程，是具有一定独立功能的程序在某数据集上的一次运行，是一个动态的概念。进程是系统进行资源分配和调度的独立单位。 线程：是进程中的一个实体，是CPU调度和分派的基本单位，线程自己基本上不拥有系统资源，它与同属于一个进程内的其他线程共享进程的全部资源。 地址空间 进程有自己独立的地址空间 进程中至少有一个线程，它们共享进程的地址空间 资源 进程是资源分配和拥有的单位 进程内的多个线程共享进程的资源 调度 线程是进程内的一个执行单元，也是进程内的可调度实体，也是处理器调度的基本单位 二、多线程 1、threading模块 python主要是通过thread和threading这两个模块来实现多线程，thread模块是比较底层的模块，threading模块是对thread做了一些封装，使用更方便。但是由于GIL的存在，无法使用threading充分利用CPU资源，如果想充分发挥多核CPU的计算能力，需要使用multiprocessing模块
python 3.x 已经摒弃了python 2.x中采用函数式thread模块来产生线程的方式。而是通过threading模块创建新的线程：
通过threading.Thread(Target=可执行方法)
import threading pro_list = [] mult_image_label_list = [] for index, img_list in enumerate(mult_image_label_list): # 创建线程 t1 = threading.Thread(target=函数名, args=(index, img_list)) pro_list.append(t1) for thread in pro_list: # 将线程设置为保护线程，否则会被无限挂起。 thread.setDaemon(True) thread.</description></item></channel></rss>